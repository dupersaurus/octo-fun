# ################################################################################
#	HOME RUN DERBY 
#		Hit as many home runs as you can before you run out of outs.
#		(100 cycles/frame recommended)
#	
#	* Pitcher Controls
#		Fastball: 	1 high, Q mid, A low
#		Changeup: 	2 high, W mid, S low
#		Curve:		3 high, E mid, D low
#		
#	* Batter Controls
#		Swing high: 1
#		Swing mid:	2
#		Swing low:	3
#
#	* Restart after strike: Z
#		
#	Hit the solid border to score a run, hit the dotted border to hit an out.
#	Combine swing timing and height to hit a home run.
#	Missing timing or height will result in a mis-hit. 
#
#	TODO:
#		* Swap teams after certain number of outs
#		* Add AI for single-player mode
#		* Fine-tune hitting algorithm for a wider range of angles off the bat
#
# ################################################################################

:const STATE_WAIT_PITCH		1 	# Waiting to pitch the ball
:const STATE_WINDUP			2  # Winding up before pitch
:const STATE_WAIT_SWING		3  # Ball pitched, waiting for swing
:const STATE_STRIKE			4  # Swung and missed
:const STATE_HIT			5  # Ball in play after being hit

:const MASK_GAMESTATE		0b00001111
:const MASK_PLAYER_TURN		0b10000000

:const GROUND_Y		23	# y position to draw player sprites at
:const BALL_Y		25	# y position to spawn ball at on pitch

:const HITX			55	# x position of where ball is to ideally hit it

:const HIGH_Y		26	# y position of the high bound of the strike zone
:const LOW_Y		30	# y position of the low bound of the strike zone

:const LEFT_HR_Y	10	# vertical position of home run area
:const TOP_HR_X		32	# horizontal position of the home run area

:alias ballx 		v7	# x pos of the ball
:alias bally		v8  # y pos of the ball
:alias ballxfrac	v9  # x fractional position
:alias ballyfrac	va  # y fractional position

# velocity is in fractional units/sec (1px = 255)
:alias ballvx  		vb  # x speed
:alias ballvy  		vc  # y speed
:alias ballgravity	vd  # acceleration on the ball while being pitched
						# OR direction of y speed after being hit

# The selected pitch before being thrown
# ve is overwritten by comparison operators, so it has limited useful scope
:alias windup-pitch ve

:alias gamestate 	v4	# first bit is which team is batting, other bits are game state

:alias outs			v5	# number of outs
:alias score		v6	# current score

: main
	score-borders
	drawscore
	drawouts

	goto-wait-for-pitch

	loop
		#:breakpoint main
		getgamestate
		if v0 == STATE_WAIT_PITCH then	wait-for-pitch
		if v0 == STATE_WINDUP 	  then	windup-state
		if v0 == STATE_WAIT_SWING then	wait-for-swing
		if v0 == STATE_STRIKE	 then 	strike-state
		if v0 == STATE_HIT		 then 	hit-state
	again
;

# sets to v0 the current state of the game
: getgamestate
	v0 := MASK_GAMESTATE
	v0 &= gamestate
;

# sets to v0 the id of the team currently batting
: getbattingteam
	v0 := MASK_PLAYER_TURN
	v0 &= gamestate	
;

: drawball
	i := ball
	sprite ballx bally 1
;

# selects batter sprite based on game state
: drawbatter
	getgamestate

	if v0 == STATE_WAIT_PITCH 	then jump setbatterset 
	if v0 == STATE_WINDUP 		then jump setbatterset
	if v0 == STATE_WAIT_SWING 	then jump setbatterset
	if v0 == STATE_STRIKE 		then jump setbatterswing
	if v0 == STATE_HIT 			then jump setbatterswing
;

# selects pitcher sprite based on game state
: drawpitcher
	#:breakpoint drawpitcher
	getgamestate

	if v0 == STATE_WAIT_PITCH 	then jump setpitcherset
	if v0 == STATE_WINDUP		then jump setpitcherwindup

	setpitcherpitch
;
	
# draw the batter set sprite
: setbatterset
	i := batterset
	v0 := 55
	v1 := GROUND_Y
	sprite v0 v1 9
;
	
# draw the batter swing sprite
: setbatterswing
	i := batterhit
	v0 := 53
	v1 := GROUND_Y
	sprite v0 v1 9
;

# draw the pitcher set sprite
: setpitcherset
	#:breakpoint setpitcherset
	i := pitcherset
	v0 := 2
	v1 := GROUND_Y
	sprite v0 v1 9
;

# draw the pitcher windup sprite
: setpitcherwindup
	#:breakpoint setpitcherwindup
	i := pitcherwindup
	v0 := 2
	v1 := GROUND_Y
	sprite v0 v1 9
;

# draw the pitcher pitch sprite
: setpitcherpitch
	#:breakpoint setpitcherpitch
	i := pitcherthrow
	v0 := 4
	v1 := GROUND_Y
	sprite v0 v1 9
;

# goto STATE_WAIT_PITCH
: goto-wait-for-pitch
	gamestate := STATE_WAIT_PITCH
	drawbatter
	drawpitcher
;

# watch for pitcher to select a pitch
: wait-for-pitch
	getgamestate
	if v0 != STATE_WAIT_PITCH then return

	# Team 0 is player batting
	getbattingteam
	if v0 == 1 begin
		windup-pitch := key	# blocking

		if windup-pitch > 9 	then return	# ignore out-of-range key
		if windup-pitch == 0 	then return
	else
		vf := 120
		delay := vf

		loop
			vf := delay
			if vf != 0 then
		again

		windup-pitch := random 0b00000111
		windup-pitch += 1
	end

	goto-windup
;

# goto STATE_WINDUP
: goto-windup
	drawpitcher
	gamestate := STATE_WINDUP
	drawpitcher
;

# wait for the windup delay to count down
: windup-state
	getgamestate
	if v0 != STATE_WINDUP then return

	vf := 60
	delay := vf

	loop
		vf := delay
		if vf != 0 then
	again

	pitch-ball
;

# throw the selected pitch
: pitch-ball
	ballx := 10
	bally := BALL_Y

	ballxfrac := 0
	ballyfrac := 0

	# high fastball
	if windup-pitch == 1 begin			
		ballvx := 255
		ballvy := -20
		ballgravity := 1
	end

	# med fastball
	if windup-pitch == 4 begin			
		ballvx := 255
		ballvy := -5
		ballgravity := 1
	end

	# low fastball
	if windup-pitch == 7 begin			
		ballvx := 255
		ballvy := 5
		ballgravity := 1
	end

	# high changeup
	if windup-pitch == 2 begin			
		ballvx := 200
		ballvy := -70
		ballgravity := 2
	end

	# med changeup
	if windup-pitch == 5 begin			
		ballvx := 200
		ballvy := -55
		ballgravity := 2
	end

	# low changeup
	if windup-pitch == 8 begin			
		ballvx := 190
		ballvy := -10
		ballgravity := 1
	end

	# high curve
	if windup-pitch == 3 begin			
		ballvx := 190
		ballvy := -110
		ballgravity := 3
	end

	# med curve
	if windup-pitch == 6 begin			
		ballvx := 200
		ballvy := -90
		ballgravity := 3
	end

	# low curve
	if windup-pitch == 9 begin			
		ballvx := 220
		ballvy := -80
		ballgravity := 3
	end

	# wait for swing
	drawpitcher
	gamestate := STATE_WAIT_SWING

	drawpitcher
	drawball
;

# ball has been pitched, watching for swing or leave
: wait-for-swing
	getgamestate
	if v0 != STATE_WAIT_SWING then return

	# check for swing
	check-swing

	# move ball
	move-ball-pitch

	if ballx >= 63 begin
		reset-swing
		return
	end

	if bally >= 32 begin
		reset-swing
		return
	end
;

# check if the player has swung and calculate the result
: check-swing
	v2 := HITX

	if v2 <= ballx then v2 =- ballx
	if v2 > ballx then v2 -= ballx

	# swing high
	v0 := 1
	if v0 key begin
		if v2 > 2 begin
			goto-strike
			return
		end

		if bally <= HIGH_Y begin 
			goto-good-hit
			return
		end

		if bally <= LOW_Y begin
			goto-grounder
			return
		end

		goto-strike
		return
	end

	# swing mid
	v0 := 2
	if v0 key begin
		if v2 > 2 begin
			goto-strike
			return
		end

		if bally < HIGH_Y begin
			goto-popup
			return
		end

		if bally > LOW_Y begin
			goto-grounder
			return
		end

		goto-good-hit
		return
	end
	
	# swing low
	v0 := 3
	if v0 key begin
		if v2 > 2 begin
			goto-strike
			return
		end

		if bally >= LOW_Y begin
			goto-good-hit
			return
		end

		if bally >= HIGH_Y begin 
			goto-popup
			return
		end

		goto-strike
		return
	end
;

# move batter to swing state
# sets the game state to value set in v2 (v0 and v1 are used to draw sprite)
: swing 
	drawbatter
	gamestate := v2
	drawbatter

	ballxfrac := 0
	ballyfrac := 0
;

# goto the strike state
: goto-strike
	getgamestate
	if v0 != STATE_STRIKE begin 
		drawstrike

		v2 := STATE_STRIKE
		swing
	end

	strike-state
;

# wait for key press to exit strike state
: strike-state
	getgamestate
	if v0 != STATE_STRIKE then return

	if ballx < 63 then move-ball-pitch

	v0 := 0xA
	if v0 key begin
		drawstrike
		reset-swing
	end
;

# process a good hit
: goto-good-hit
	v2 := STATE_HIT
	swing

	#:breakpoint goto-good-hit
	ballvx := 100
	ballvy := 60
	ballgravity := 1
;

# process a grounder hit
: goto-grounder
	v2 := STATE_HIT
	swing

	#:breakpoint goto-grounder
	ballvx := 160
	ballvy := 50
	ballgravity := 2
;

# process a popup hit
: goto-popup
	#:breakpoint goto-popup
	v2 := STATE_HIT
	swing

	ballvx := 10
	ballvy := 100
	ballgravity := 1
;

# logic loop while in STATE_HIT
: hit-state
	move-ball-hit
;

# reset the batter, pitcher, and ball for a new pitch
: reset-swing
	getgamestate
	if v0 == STATE_WAIT_PITCH then return

	drawpitcher
	drawbatter
	drawball

	goto-wait-for-pitch
;

# step the ball after being pitched
: move-ball-pitch
	getgamestate
	if v0 == STATE_HIT then return

	v3 := ballx
	ve := bally

	drawball

	# move forward
	v1 := ballvx
	ballxfrac += v1
	v3 += vf

	# apply gravity
	v1 := ballvy
	v1 += ballgravity
	ballvy := v1

	# increment y position
	v1 := ballvy
	
	# using < overwrites ve, so use bitmagic instead
	# to determine if the velocity is negative or not
	v2 := 0b10000000
	v2 &= ballvy
	if v2 == 0 begin	# numbers >=128 are negative
		ballyfrac += v1
		ve += vf
	else
		v2 := 255
		v1 =- v2
		ballyfrac += v1
		ve -= vf
	end

	ballx := v3
	bally := ve

	drawball
;

# step the ball after being hit
: move-ball-hit

	v3 := ballx
	ve := bally

	# move x
	v1 := ballvx
	ballxfrac += v1
	v3 -= vf

	# move y
	v1 := ballvy
	ballyfrac += v1

	if ballgravity == 1 begin
		ve -= vf
	else
		ve += vf

		if bally == 31 then ballgravity := 1
	end

	vf := 0
	if v3 != ballx then vf := 1

	v0 := 1
	if ve != bally then vf |= v0
	if vf == 1 begin
		drawball
		ballx := v3
		bally := ve
		drawball
	else
		return
	end

	# check x extent
	if ballx == 0 begin
		if bally < LEFT_HR_Y 	then jump goto-home-run
		goto-out
		reset-swing
		return
	end

	if bally == 0 begin
		if ballx < TOP_HR_X	then jump goto-home-run
		goto-out
		return
	end
;

# process being out
: goto-out
	add-to-outs
	reset-swing
;

# process a home run
: goto-home-run
	add-to-score
	reset-swing
;

# adds one to the score
: add-to-score
	drawscore
	score += 1
	drawscore	
;

: drawscore
	i := digits
	bcd score

	# registers beyond bally (v8) don't need to be persisted at this point
	load v2

	va := 48
	vb := 2

	if score > 99 begin
		i := hex v0
		sprite va vb 5
	end
	va += 5

	if score > 9 begin
		i := hex v1
		sprite va vb 5
	end
	va += 5

	i := hex v2
	sprite va vb 5
	va += 5
;

# add to the out count
: add-to-outs
	drawouts
	outs += 1
	drawouts
;

: drawouts
	# registers beyond bally (v8) don't need to be persisted at this point
	va := 58
	vb := 8
	i := hex outs
	sprite va vb 5
;

# draw the scoring borders
: score-borders
	# left score
	v0 := 0
	v1 := 0
	i := left-score-border
	sprite v0 v1 LEFT_HR_Y

	# top
	i := top-score-border
	v0 := 8
	sprite v0 v1 1
	v0 := 16
	sprite v0 v1 1
	v0 := 24
	sprite v0 v1 1

	# left out
	v0 := 0
	v1 := LEFT_HR_Y
	i := left-out-border
	sprite v0 v1 15

	i := left-out-border-alt
	v1 := 25
	sprite v0 v1 7

	# top out
	v0 := TOP_HR_X
	v1 := 0
	i := top-out-border
	
	sprite v0 v1 1
	v0 += 8
	sprite v0 v1 1
	v0 += 8
	sprite v0 v1 1
	v0 += 8
	sprite v0 v1 1
;

: left-score-border 0xFF 0x80 0x80 0x80 0x80 0x80 0x80 0x80 0x80 0x80
: left-out-border 0x00 0xB8 0x28 0xB8 0x00 0xA8 0x38 0x80 0x38 0x90 0x10 0x80 0x00 0x80 0x00 
: left-out-border-alt 0x80 0x00 0x80 0x00 0x80 0x00 0x80

: top-score-border 0xFF
: top-out-border 0x55

: digits 0 0 0

: ball
	0x80

: batterset
	0x01 0x32 0x14 0x7C 0x38 0x10 0x10 0x28 0x28

: batterhit
	0x00 0x18 0x08 0xF8 0x08 0x08 0x10 0x2C 0x42

: pitcherset
	0x18 0x10 0x38 0x38 0x10 0x10 0x28 0x28 0x28 

: pitcherwindup
	0x28 0x38 0x38 0x10 0x18 0x18 0x28 0x20 0x20

: pitcherthrow
	0x00 0x0C 0x08 0x1E 0x18 0x38 0xF0 0x10 0x10

# Letters for the strike screen
: strikeS 0x00 0x3C 0x7E 0x62 0x60 0x60 0x60 0x3C 0x3E 0x06 0x06 0x46 0x7E 0x3C 0x00 
: strikeT 0x00 0x00 0x3C 0x7E 0x18 0x18 0x18 0x18 0x18 0x18 0x10 0x00 0x00 0x00 0x00 
: strikeR 0x00 0x38 0x6C 0x66 0x62 0x66 0x6C 0x78 0x78 0x6C 0x6C 0x26 0x06 0x00 0x00 
: strikeI 0x00 0x00 0x00 0x7C 0x30 0x30 0x30 0x30 0x30 0x30 0x30 0x30 0x7C 0x7C 0x00 
: strikeK 0x00 0x62 0x6E 0x7C 0x78 0x70 0x60 0x78 0x7C 0x7E 0x66 0x42 0x00 0x00 0x00 
: strikeE 0x00 0x00 0x00 0x3C 0x7C 0x60 0x60 0x78 0x60 0x7E 0x7E 0x7E 0x00 0x00 0x00 

# Draw the strike icon
: drawstrike
	v0 := 8
	v1 := 7
	i := strikeS
	sprite v0 v1 15

	v0 += 8
	i := strikeT
	sprite v0 v1 15

	v0 += 8
	i := strikeR
	sprite v0 v1 15

	v0 += 8
	i := strikeI
	sprite v0 v1 15

	v0 += 8
	i := strikeK
	sprite v0 v1 15

	v0 += 8
	i := strikeE
	sprite v0 v1 15
;