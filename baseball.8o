# ################################################################################
#	HOME RUN DERBY 
#		Hit as many home runs as you can before you run out of outs.
#		(100 cycles/frame recommended)
#	
#	* Pitcher Controls
#		Fastball: 	1 high, Q mid, A low
#		Changeup: 	2 high, W mid, S low
#		Curve:		3 high, E mid, D low
#		
#	* Batter Controls
#		Swing high: 1
#		Swing mid:	2
#		Swing low:	3
#		
#	Hit the solid border to score a run, hit the dotted border to hit an out.
#	Combine swing timing and height to hit a home run.
#	Missing timing or height will result in a mis-hit. 
#
#	TODO:
#		* Swap teams after certain number of outs
#		* Add AI for single-player mode
#		* Fine-tune hitting algorithm for a wider range of angles off the bat
#
# ################################################################################

:const GROUND_Y				23
:const BALL_Y				25

:const HITX					55

:const STATE_WAIT_PITCH		0b00000001
:const STATE_WAIT_SWING		0b00000010
:const STATE_BALL			0b00000100
:const STATE_SWING 			0b00001000
:const STATE_STRIKE			0b00010000
:const STATE_HIT			0b00100000

:const HIGH_Y		26
:const LOW_Y		30

:const LEFT_HR_Y	10
:const TOP_HR_X		32

:alias ballx 		v7
:alias bally		v8
:alias ballxfrac	v9
:alias ballyfrac	va

# velocity is in fractional units/sec (1px = 255)
:alias ballvx  		vb
:alias ballvy  		vc
:alias ballgravity	vd

:alias gamestate 	v4

:alias outs			v5
:alias score		v6

:alias watchkey v2

: getgamestate
	v0 := 0b01111111
	v0 &= gamestate
;

: getbattingteam
	v0 := 0b10000000
	v0 &= gamestate	
;

: drawball
	i := ball
	sprite ballx bally 1
;

: drawbatter
	getgamestate
	if v0 < STATE_SWING  begin setbatterset else setbatterswing end
;

: drawpitcher
	#:breakpoint drawpitcher
	getgamestate
	if v0 == STATE_WAIT_PITCH begin setpitcherset else setpitcherpitch end
;
	
: setbatterset
	i := batterset
	v0 := 55
	v1 := GROUND_Y
	sprite v0 v1 9
;
	
: setbatterswing
	i := batterhit
	v0 := 55
	v1 := GROUND_Y
	sprite v0 v1 9
;

: setpitcherset
	i := pitcherset
	v0 := 2
	v1 := GROUND_Y
	sprite v0 v1 9
;

: setpitcherpitch
	i := pitcherthrow
	v0 := 3
	v1 := GROUND_Y
	sprite v0 v1 9
;

# jump table for game states
: game-state-lookup
	wait-for-pitch		return
	wait-for-swing		return
;

# wait for the pitcher to select a pitch
: wait-for-pitch
	getgamestate
	if v0 != STATE_WAIT_PITCH then return

	watchkey := key	# blocking

	if watchkey > 9 	then return	# ignore out-of-range key
	if watchkey == 0 	then return

	ballx := 10
	bally := BALL_Y

	ballxfrac := 0
	ballyfrac := 0

	# high fastball
	if watchkey == 1 begin			
		ballvx := 255
		ballvy := -20
		ballgravity := 1
	end

	# med fastball
	if watchkey == 4 begin			
		ballvx := 255
		ballvy := -5
		ballgravity := 1
	end

	# low fastball
	if watchkey == 7 begin			
		ballvx := 255
		ballvy := 5
		ballgravity := 1
	end

	# high changeup
	if watchkey == 2 begin			
		ballvx := 200
		ballvy := -70
		ballgravity := 2
	end

	# med changeup
	if watchkey == 5 begin			
		ballvx := 200
		ballvy := -55
		ballgravity := 2
	end

	# low changeup
	if watchkey == 8 begin			
		ballvx := 190
		ballvy := -10
		ballgravity := 1
	end

	# high curve
	if watchkey == 3 begin			
		ballvx := 190
		ballvy := -110
		ballgravity := 3
	end

	# med curve
	if watchkey == 6 begin			
		ballvx := 200
		ballvy := -90
		ballgravity := 3
	end

	# low curve
	if watchkey == 9 begin			
		ballvx := 220
		ballvy := -80
		ballgravity := 3
	end

	drawpitcher
	gamestate := STATE_WAIT_SWING

	drawpitcher
	drawball
;

# ball has been pitched, watching for swing or leave
: wait-for-swing
	getgamestate
	if v0 != STATE_WAIT_SWING then return

	# check for swing
	check-swing

	# move ball
	move-ball-pitch

	if ballx >= 63 begin
		reset-swing
		return
	end

	if bally >= 32 begin
		reset-swing
		return
	end
;

# check if the player has swung
: check-swing
	v2 := HITX

	if v2 <= ballx then v2 =- ballx
	if v2 > ballx then v2 -= ballx

	# swing high
	v0 := 1
	if v0 key begin
		if v2 > 2 begin
			goto-strike
			return
		end

		if bally <= HIGH_Y begin 
			goto-good-hit
			return
		end

		if bally <= LOW_Y begin
			goto-grounder
			return
		end

		goto-strike
		return
	end

	# swing mid
	v0 := 2
	if v0 key begin
		if v2 > 2 begin
			goto-strike
			return
		end

		if bally < HIGH_Y begin
			goto-popup
			return
		end

		if bally > LOW_Y begin
			goto-grounder
			return
		end

		goto-good-hit
		return
	end
	
	# swing low
	v0 := 3
	if v0 key begin
		if v2 > 2 begin
			goto-strike
			return
		end

		if bally >= LOW_Y begin
			goto-good-hit
			return
		end

		if bally >= HIGH_Y begin 
			goto-popup
			return
		end

		goto-strike
		return
	end
;

: swing 
	drawbatter
	gamestate := STATE_SWING
	drawbatter

	ballxfrac := 0
	ballyfrac := 0
;

: goto-strike
	getgamestate
	if v0 != STATE_STRIKE begin 
		drawstrike
		swing
		gamestate := STATE_STRIKE
	end

	strike-state
;

: strike-state
	getgamestate
	if v0 != STATE_STRIKE then return

	if ballx < 63 then move-ball-pitch

	v0 := 0xA
	if v0 key begin
		drawstrike
		reset-swing
	end
;

: goto-good-hit
	swing
	gamestate := STATE_HIT

	#:breakpoint goto-good-hit
	ballvx := 255
	ballvy := 160
	ballgravity := 1
;

: goto-grounder
	swing
	gamestate := STATE_HIT

	#:breakpoint goto-grounder
	ballvx := 255
	ballvy := 50
	ballgravity := 2
;

: goto-popup
	#:breakpoint goto-popup
	swing
	gamestate := STATE_HIT

	ballvx := 30
	ballvy := 180
	ballgravity := 1
;

: hit-state
	move-ball-hit
;

: reset-swing
	getgamestate
	if v0 == STATE_WAIT_PITCH then return

	drawpitcher
	drawbatter
	drawball

	gamestate := STATE_WAIT_PITCH

	drawbatter
	drawpitcher
;

# step the ball after being pitched
: move-ball-pitch
	getgamestate
	if v0 == STATE_HIT then return

	drawball

	# move forward
	v1 := ballvx
	ballxfrac += v1
	ballx += vf

	# apply gravity
	v1 := ballvy
	v1 += ballgravity
	ballvy := v1

	# increment y position
	v1 := ballvy
	
	if ballvy < 128 begin	# numbers >=128 are negative
		ballyfrac += v1
		bally += vf
	else
		v2 := 255
		v1 =- v2
		ballyfrac += v1
		bally -= vf
	end

	drawball
;

: move-ball-hit

	drawball

	# move x
	v1 := ballvx
	ballxfrac += v1
	ballx -= vf

	# move y
	v1 := ballvy
	ballyfrac += v1

	if ballgravity == 1 begin
		bally -= vf
	else
		bally += vf

		if bally == 31 then ballgravity := 1
	end


	drawball

	# check x extent
	if ballx == 0 begin
		if bally < LEFT_HR_Y 	then jump goto-home-run
		goto-out
		reset-swing
		return
	end

	if bally == 0 begin
		if ballx < TOP_HR_X	then jump goto-home-run
		goto-out
		return
	end
;

: goto-out
	add-to-outs
	reset-swing
;

: goto-home-run
	add-to-score
	reset-swing
;

# adds one to the score
: add-to-score
	drawscore
	score += 1
	drawscore	
;

: drawscore
	i := digits
	bcd score

	# registers beyond bally (v8) don't need to be persisted at this point
	load v2

	va := 48
	vb := 2

	if score > 99 begin
		i := hex v0
		sprite va vb 5
	end
	va += 5

	if score > 9 begin
		i := hex v1
		sprite va vb 5
	end
	va += 5

	i := hex v2
	sprite va vb 5
	va += 5
;

: add-to-outs
	drawouts
	outs += 1
	drawouts
;

: drawouts
	# registers beyond bally (v8) don't need to be persisted at this point
	va := 58
	vb := 8
	i := hex outs
	sprite va vb 5
;

: main
	score := 0
	gamestate := STATE_WAIT_PITCH

	score-borders
	drawbatter
	drawpitcher
	drawscore
	drawouts

	loop
		#:breakpoint main
		getgamestate
		if v0 == STATE_WAIT_PITCH then	wait-for-pitch
		if v0 == STATE_WAIT_SWING then	wait-for-swing
		if v0 == STATE_STRIKE	 then 	strike-state
		if v0 == STATE_HIT		 then 	hit-state
	again
;

: score-borders
	# left score
	v0 := 0
	v1 := 0
	i := left-score-border
	sprite v0 v1 LEFT_HR_Y

	# top
	i := top-score-border
	v0 := 8
	sprite v0 v1 1
	v0 := 16
	sprite v0 v1 1
	v0 := 24
	sprite v0 v1 1

	# left out
	v0 := 0
	v1 := LEFT_HR_Y
	i := left-out-border
	sprite v0 v1 15

	i := left-out-border-alt
	v1 := 25
	sprite v0 v1 7

	# top out
	v0 := TOP_HR_X
	v1 := 0
	i := top-out-border
	
	sprite v0 v1 1
	v0 += 8
	sprite v0 v1 1
	v0 += 8
	sprite v0 v1 1
	v0 += 8
	sprite v0 v1 1
;

: left-score-border 0xFF 0x80 0x80 0x80 0x80 0x80 0x80 0x80 0x80 0x80
: left-out-border 0x00 0xB8 0x28 0xB8 0x00 0xA8 0x38 0x80 0x38 0x90 0x10 0x80 0x00 0x80 0x00 
: left-out-border-alt 0x80 0x00 0x80 0x00 0x80 0x00 0x80

: top-score-border 0xFF
: top-out-border 0x55

: digits 0 0 0

: ball
	0x80

: batterset
	0x01 0x32 0x14 0x7C 0x38 0x10 0x10 0x28 0x28

: batterhit
	0x00 0x18 0x08 0xF8 0x08 0x08 0x10 0x2C 0x42

: pitcherset
	0x18 0x10 0x38 0x38 0x10 0x10 0x28 0x28 0x28 

: pitcherthrow
	0x00 0x00 0x00 0x14 0x38 0x50 0x10 0x30 0x50

: strikeS 0x00 0x3C 0x7E 0x62 0x60 0x60 0x60 0x3C 0x3E 0x06 0x06 0x46 0x7E 0x3C 0x00 
: strikeT 0x00 0x00 0x3C 0x7E 0x18 0x18 0x18 0x18 0x18 0x18 0x10 0x00 0x00 0x00 0x00 
: strikeR 0x00 0x38 0x6C 0x66 0x62 0x66 0x6C 0x78 0x78 0x6C 0x6C 0x26 0x06 0x00 0x00 
: strikeI 0x00 0x00 0x00 0x7C 0x30 0x30 0x30 0x30 0x30 0x30 0x30 0x30 0x7C 0x7C 0x00 
: strikeK 0x00 0x62 0x6E 0x7C 0x78 0x70 0x60 0x78 0x7C 0x7E 0x66 0x42 0x00 0x00 0x00 
: strikeE 0x00 0x00 0x00 0x3C 0x7C 0x60 0x60 0x78 0x60 0x7E 0x7E 0x7E 0x00 0x00 0x00 

: drawstrike
	v0 := 10
	v1 := 4
	i := strikeS
	sprite v0 v1 15

	v0 += 8
	i := strikeT
	sprite v0 v1 15

	v0 += 8
	i := strikeR
	sprite v0 v1 15

	v0 += 8
	i := strikeI
	sprite v0 v1 15

	v0 += 8
	i := strikeK
	sprite v0 v1 15

	v0 += 8
	i := strikeE
	sprite v0 v1 15
;